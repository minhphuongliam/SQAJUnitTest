
package com.thanhtam.backend;

import com.thanhtam.backend.entity.Part;
import com.thanhtam.backend.entity.Question;
import com.thanhtam.backend.repository.QuestionRepository;
import com.thanhtam.backend.service.QuestionServiceImpl;
import com.thanhtam.backend.ultilities.DifficultyLevel;

import org.apache.commons.beanutils.converters.SqlDateConverter;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Date;
import java.util.Optional;
import java.util.Scanner;
import static org.junit.jupiter.api.Assertions.*;

/**
 * ‚úÖ Class ki·ªÉm th·ª≠ t√≠ch h·ª£p cho QuestionServiceImpl
 * üéØ Ki·ªÉm tra c√°c h√†nh vi ghi/x√≥a th·ª±c s·ª± v√†o DB: save(), update(), delete()
 * üí° D·ªØ li·ªáu ƒë∆∞·ª£c rollback sau m·ªói test nh·ªù @Transactional
 */
@SpringBootTest
@Transactional
public class QuestionServiceImplTest_DB {

    @Autowired
    private QuestionServiceImpl questionService;

    @Autowired
    private QuestionRepository questionRepository;

    // =====================================================================================
    // ‚úÖ TEST CASE 4.16 - L∆∞u c√¢u h·ªèi EASY (GHI V√ÄO DB)
    // üéØ M·ª•c ƒë√≠ch: ki·ªÉm tra l∆∞u th√†nh c√¥ng v√†o DB th·∫≠t v·ªõi m·ª©c ƒë·ªô EASY
    // üß™ ƒêi·ªÅu ki·ªán: t·∫°o ƒë·ªëi t∆∞·ª£ng Question v·ªõi Part v√† DifficultyLevel, g·ªçi save()
    // ‚úÖ K·∫øt qu·∫£ mong ƒë·ª£i: ID t·ª± sinh, d·ªØ li·ªáu l∆∞u ƒë√∫ng trong DB
    // =====================================================================================
    @Test
    void testSaveQuestion_shouldPersistInDB() {
        Question q = new Question();
        Part part = new Part(); 
        part.setId(1L);
        q.setPart(part);
       
        q.setQuestionText("C√¢u h·ªèi ki·ªÉm th·ª≠");
        
        q.setDifficultyLevel(DifficultyLevel.EASY);
        q.setDeleted(false);

        questionService.save(q);  // void method
        
        Optional<Question> found = questionRepository.findById(q.getId());
        assertTrue(found.isPresent());
        assertEquals("C√¢u h·ªèi ki·ªÉm th·ª≠", found.get().getQuestionText());
        // Scanner sc = new Scanner(System.in);
        // String s = sc.nextLine();
    }

    // =====================================================================================
    // ‚úÖ TEST CASE 4.20 - C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng
    // üéØ M·ª•c ƒë√≠ch: ki·ªÉm tra update thay ƒë·ªïi ƒë∆∞·ª£c l∆∞u l·∫°i
    // üß™ ƒêi·ªÅu ki·ªán: l∆∞u c√¢u h·ªèi tr∆∞·ªõc, sau ƒë√≥ s·ª≠a text v√† g·ªçi update()
    // ‚úÖ K·∫øt qu·∫£ mong ƒë·ª£i: text ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë√∫ng
    // =====================================================================================
    @Test
    void testUpdateQuestion_shouldUpdateContent() {
        Question q = new Question();
        Part part = new Part();
        part.setId(1L);
        q.setPart(part);
        q.setQuestionText("Ban ƒë·∫ßu");
        q.setDifficultyLevel(DifficultyLevel.EASY);
        q.setDeleted(false);

        questionService.save(q);

        q.setQuestionText("ƒê√£ c·∫≠p nh·∫≠t");
        questionService.update(q);  // void method

        Optional<Question> updated = questionRepository.findById(q.getId());
        assertTrue(updated.isPresent());
        assertEquals("ƒê√£ c·∫≠p nh·∫≠t", updated.get().getQuestionText());
    }

    // =====================================================================================
    // ‚úÖ TEST CASE 4.22 - X√≥a c√¢u h·ªèi khi t√¨m th·∫•y
    // üéØ M·ª•c ƒë√≠ch: ki·ªÉm tra xo√° c·ª©ng 1 c√¢u h·ªèi
    // üß™ ƒêi·ªÅu ki·ªán: l∆∞u v√†o DB ‚Üí g·ªçi delete(id)
    // ‚úÖ K·∫øt qu·∫£ mong ƒë·ª£i: kh√¥ng c√≤n record trong DB
    // =====================================================================================
    @Test
    void testDeleteQuestion_shouldDeleteFromDB() {
        Question q = new Question();
        q.setQuestionText("C√¢u h·ªèi c·∫ßn xo√°");
        q.setDeleted(false);
        q.setDifficultyLevel(DifficultyLevel.EASY);
        questionService.save(q);
        Long id = q.getId();

        questionService.delete(id);

        Optional<Question> deleted = questionRepository.findById(id);
        assertFalse(deleted.isPresent());
    }
}
